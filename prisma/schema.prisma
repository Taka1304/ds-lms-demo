generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 学年
enum Grade {
  B1
  B2
  B3
  B4
  M1
  M2
  D1
  D2
  D3
}

// システム管理者用の権限
enum SystemRole {
  ADMIN
  USER
}

// 課外活動団体での役割
enum MemberRole {
  LEADER // 管理者
  MEMBER // 部員
}

model User {
  id            String    @id @default(cuid())
  name          String?
  displayName   String?
  email         String    @unique
  emailVerified DateTime?
  grade         Grade?
  image         String?
  role          SystemRole? @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  Authenticator    Authenticator[]
  skillProgress    SkillProgress[]
  organizations    OrganizationMember[]
  submissions      Submission[]
  externalLearning ExternalLearning[]
  notifications    Notification[]
  createdProblems  Problem[]            @relation("ProblemCreator")
  updatedProblems  Problem[]            @relation("ProblemUpdater")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// 課外活動団体（部活動/サークル）
model Organization {
  id          String   @id @default(cuid())
  name        String   @unique // 団体名
  description String? // 団体の説明
  iconImage   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members  OrganizationMember[]
  problems Problem[] // 団体が作成した問題

  @@index([name])
}

// 部員情報（兼部を考慮した多対多の関係）
model OrganizationMember {
  id             String     @id @default(cuid())
  userId         String
  organizationId String
  role           MemberRole
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
}

model Problem {
  id              String @id @default(cuid())
  organizationId  String // 作成した団体
  title           String
  slug            String @unique // URL用のスラッグ
  description     String // 問題の説明（Markdown）
  difficultyLevel Int // 難易度（1-5等）
  constraints     String // 制約条件（時間、メモリ、入力値の範囲など）

  // 実行制限
  timeLimit   Int // ミリ秒単位
  memoryLimit Int // MB単位

  // 公開設定
  isPublic   Boolean @default(false) // true: 全体公開, false: 団体内のみ
  isArchived Boolean @default(false)
  version    Int     @default(1) // 問題のバージョン管理

  // 統計情報
  submitCount Int @default(0)
  acceptCount Int @default(0)

  // 作成・更新情報
  createdById String
  updatedById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization        @relation(fields: [organizationId], references: [id])
  createdBy    User                @relation("ProblemCreator", fields: [createdById], references: [id])
  updatedBy    User                @relation("ProblemUpdater", fields: [updatedById], references: [id])
  submissions  Submission[]
  testCases    TestCase[]
  tags         ProblemTag[]
  sampleCodes  ProblemSampleCode[]
}

model ProblemSampleCode {
  id          String   @id @default(cuid())
  problemId   String
  language    String // プログラミング言語
  code        String // サンプルコード
  description String? // コードの説明
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  problem Problem @relation(fields: [problemId], references: [id])
}

model TestCase {
  id          String   @id @default(cuid())
  problemId   String
  input       String // 入力データ
  output      String // 期待される出力
  explanation String? // テストケースの説明
  isExample   Boolean  @default(false) // サンプルケースかどうか
  isHidden    Boolean  @default(true) // 提出時に見えるかどうか
  createdAt   DateTime @default(now())

  // Relations
  problem Problem @relation(fields: [problemId], references: [id])
}

model Submission {
  id             String   @id @default(cuid())
  userId         String
  problemId      String
  organizationId String
  code           String
  language       String   @default("python3")
  status         String // "accepted", "wrong_answer", "time_limit_exceeded", etc.
  executionTime  Float? // 実行時間（ミリ秒）
  memoryUsage    Int? // メモリ使用量（MB）
  errorMessage   String? // エラーメッセージ
  testResults    Json? // 各テストケースの結果
  score          Float? // 得点（必要な場合）
  createdAt      DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])

  @@index([userId, problemId, status])
  @@index([problemId, status, executionTime])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // Relations
  problems             ProblemTag[]
  externalLearningTags ExternalLearningTag[]
}

model ProblemTag {
  problemId String
  tagId     String
  createdAt DateTime @default(now())

  // Relations
  problem Problem @relation(fields: [problemId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([problemId, tagId])
}

model ExternalLearning {
  id           String   @id @default(cuid())
  userId       String
  platform     String // "paiza", "signate" etc.
  problemId    String?
  problemTitle String
  learningDate DateTime
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user        User                         @relation(fields: [userId], references: [id])
  attachments ExternalLearningAttachment[]
  tags        ExternalLearningTag[]
}

model ExternalLearningAttachment {
  id         String   @id @default(cuid())
  learningId String
  type       String // "image", "text"
  content    String // URL or text content
  createdAt  DateTime @default(now())

  // Relations
  externalLearning ExternalLearning @relation(fields: [learningId], references: [id])
}

model ExternalLearningTag {
  learningId String
  tagId      String
  createdAt  DateTime @default(now())

  // Relations
  externalLearning ExternalLearning @relation(fields: [learningId], references: [id])
  tag              Tag              @relation(fields: [tagId], references: [id])

  @@id([learningId, tagId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])
}

// ランキングのスナップショット（定期保存用）
model RankingSnapshot {
  id        String   @id @default(cuid())
  type      String // "problem", "global"
  targetId  String? // problem_idなど
  data      Json // ランキングデータ
  createdAt DateTime @default(now())

  @@index([type, targetId, createdAt])
}

// システム設定
model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// お知らせ管理
model Announcement {
  id          String    @id @default(cuid())
  title       String
  content     String
  isPublic    Boolean   @default(false)
  publishFrom DateTime?
  publishTo   DateTime?
  createdBy   String // Admin User ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum SkillRequirement {
  NONE // 必須ではない
  BASIC // 必須スキル (〇)
  ADVANCED // より高い必須度 (◎)
}

model SkillCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String? // カテゴリの説明
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  skills Skill[]
}

model Skill {
  id          String           @id @default(cuid())
  categoryId  String
  name        String // スキル名
  description String? // チェック項目の説明
  level       Int // スキルレベル (★の数)
  subCategory String? // サブカテゴリ
  requirement SkillRequirement @default(NONE) // 必須スキルかどうか
  aiType      String? // AI区分 (例: LLM, Diffusion)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  category     SkillCategory   @relation(fields: [categoryId], references: [id])
  userProgress SkillProgress[]
}

model SkillProgress {
  id         String    @id @default(cuid())
  userId     String
  skillId    String
  isAchieved Boolean   @default(false) // 達成済みかどうか
  achievedAt DateTime? // 達成日

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId]) // ユーザーごとのスキル進捗を一意に識別
}
